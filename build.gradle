buildscript {
    ext {
        defaultRepositories = {
            mavenCentral()
            mavenLocal()
            maven { url = uri("https://plugins.gradle.org/m2/") }
        }

    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url 'https://repo.spring.io/plugins-snapshot' }
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    repositories defaultRepositories

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}"
    }
}

allprojects {
    repositories defaultRepositories
}

subprojects {
    version = "1.0.0-RELEASE"

    apply plugin: "io.spring.dependency-management"
    apply plugin: "idea"
    apply plugin: "kotlin"
    apply plugin: "kotlin-spring"
    apply plugin: "kotlin-jpa"
    apply plugin: "org.jetbrains.kotlin.jvm"

    repositories defaultRepositories

    dependencies {
        dependencies {
            implementation (
                    "org.jetbrains.kotlin:kotlin-reflect",
                    "org.jetbrains.kotlin:kotlin-stdlib-jdk8",
                    "org.springframework.boot:spring-boot",
                    "org.springframework.boot:spring-boot-autoconfigure",
                    platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"),
            )

            testImplementation(
                    "org.springframework.boot:spring-boot-test",
                    "org.springframework.boot:spring-boot-starter-test",
                    "org.junit.jupiter:junit-jupiter-api:${jupiterVersion}",
                    "org.junit.jupiter:junit-jupiter-params:${jupiterVersion}",
                    "org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}",
                    platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}"),
            )
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "11"
        }
    }

    compileKotlin {
        kotlinOptions {
            jvmTarget = "11"
            javaParameters = true
        }
    }

    compileTestKotlin {
        sourceCompatibility = 1.8
        targetCompatibility = 11

        kotlinOptions {
            jvmTarget = "11"
            javaParameters = true
            allWarningsAsErrors = true
        }
    }

    test {
        useJUnitPlatform()
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

        testLogging {
            showStandardStreams = true
            events "failed"
            exceptionFormat "full"

            afterSuite { desc, result ->
                if (!desc.parent) {
                    println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.incremental = true
    }
}